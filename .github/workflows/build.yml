name: Build Android and Windows Packages

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build MAUI Packages
    runs-on: windows-latest
    steps:
      - name: Set signing file paths
        shell: pwsh
        run: |
          $androidPath = [System.IO.Path]::Combine($env:RUNNER_TEMP, 'android_signing.keystore')
          $windowsPath = [System.IO.Path]::Combine($env:RUNNER_TEMP, 'windows_signing_certificate.pfx')

          "ANDROID_KEYSTORE_PATH=$androidPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "WINDOWS_CERTIFICATE_PATH=$windowsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Detect available signing assets
        shell: pwsh
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          WINDOWS_PFX_BASE64: ${{ secrets.WINDOWS_PFX_BASE64 }}
        run: |
          $hasAndroidKeystore = -not [string]::IsNullOrEmpty($env:ANDROID_KEYSTORE_BASE64)
          $hasWindowsCertificate = -not [string]::IsNullOrEmpty($env:WINDOWS_PFX_BASE64)

          "HAS_ANDROID_KEYSTORE=$($hasAndroidKeystore.ToString().ToLowerInvariant())" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "HAS_WINDOWS_CERTIFICATE=$($hasWindowsCertificate.ToString().ToLowerInvariant())" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install MAUI workload
        run: dotnet workload install maui --ignore-failed-sources
        shell: pwsh

      - name: Compute version numbers
        shell: pwsh
        run: |
          $majorMinor = "1.0"
          $build = "${{ github.run_number }}"
          $appVersion = "$majorMinor.$build"
          $windowsVersion = "$majorMinor.$build.0"

          "APP_MAJOR_MINOR=$majorMinor" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "APP_BUILD=$build" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "APP_VERSION=$appVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "APP_VERSION_WINDOWS=$windowsVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Restore dependencies
        run: dotnet restore "./Password Phrase Producer/Password Phrase Producer.sln"
        shell: pwsh

      - name: Restore Android signing keystore
        if: ${{ env.HAS_ANDROID_KEYSTORE == 'true' }}
        shell: pwsh
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          [IO.File]::WriteAllBytes($env:ANDROID_KEYSTORE_PATH, [Convert]::FromBase64String($env:ANDROID_KEYSTORE_BASE64))

      - name: Publish Android APK
        shell: pwsh
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          $signingArgs = ""
          if (Test-Path $env:ANDROID_KEYSTORE_PATH) {
            $signingArgs = "-p:AndroidSigningKeyStore=$env:ANDROID_KEYSTORE_PATH -p:AndroidSigningStorePass=$env:ANDROID_KEYSTORE_PASSWORD -p:AndroidSigningKeyAlias=$env:ANDROID_KEY_ALIAS -p:AndroidSigningKeyPass=$env:ANDROID_KEY_PASSWORD"
          }
          else {
            Write-Host "::warning::Android keystore not provided. APK will be unsigned and cannot be installed or updated on devices."
          }

          dotnet publish "./Password Phrase Producer/Password Phrase Producer.sln" `
            -c Release `
            -f net8.0-android `
            -p:ApplicationDisplayVersion=$env:APP_VERSION `
            -p:ApplicationVersion=$env:APP_BUILD `
            $signingArgs

      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: |
            Password Phrase Producer\bin\Release\net8.0-android\publish\*.apk

      - name: Restore Windows signing certificate
        if: ${{ env.HAS_WINDOWS_CERTIFICATE == 'true' }}
        shell: pwsh
        env:
          WINDOWS_PFX_BASE64: ${{ secrets.WINDOWS_PFX_BASE64 }}
        run: |
          [IO.File]::WriteAllBytes($env:WINDOWS_CERTIFICATE_PATH, [Convert]::FromBase64String($env:WINDOWS_PFX_BASE64))

      - name: Publish Windows MSIX package
        shell: pwsh
        env:
          WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
        run: |
          $signingArgs = "-p:AppxPackageSigningEnabled=false"
          if (Test-Path $env:WINDOWS_CERTIFICATE_PATH) {
            $signingArgs = "-p:AppxPackageSigningEnabled=true -p:PackageCertificateFile=$env:WINDOWS_CERTIFICATE_PATH -p:PackageCertificatePassword=$env:WINDOWS_PFX_PASSWORD"
          }
          else {
            Write-Host "::warning::Windows certificate not provided. MSIX package will be unsigned and require manual trust before installation or updates."
          }

          dotnet publish "./Password Phrase Producer/Password Phrase Producer.sln" `
            -c Release `
            -f net8.0-windows10.0.19041.0 `
            -p:RuntimeIdentifier=win10-x64 `
            -p:WindowsPackageType=msix `
            -p:ApplicationDisplayVersion=$env:APP_VERSION `
            -p:ApplicationVersion=$env:APP_BUILD `
            -p:PackageVersion=$env:APP_VERSION_WINDOWS `
            $signingArgs

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-msix
          path: |
            Password Phrase Producer\bin\Release\net8.0-windows10.0.19041.0\win10-x64\AppPackages\**\*.msix
