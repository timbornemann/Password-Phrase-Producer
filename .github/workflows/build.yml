name: Build Android and Windows Packages

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build MAUI Packages
    runs-on: windows-latest
    outputs:
      app-version: ${{ steps.compute_versions.outputs.app_version }}
    steps:
      - name: Set signing file paths
        shell: pwsh
        run: |
          $androidPath = [System.IO.Path]::Combine($env:RUNNER_TEMP, 'android_signing.keystore')
          $windowsPath = [System.IO.Path]::Combine($env:RUNNER_TEMP, 'windows_signing_certificate.pfx')

          "ANDROID_KEYSTORE_PATH=$androidPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "WINDOWS_CERTIFICATE_PATH=$windowsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Detect available signing assets
        shell: pwsh
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          WINDOWS_PFX_BASE64: ${{ secrets.WINDOWS_PFX_BASE64 }}
        run: |
          $hasAndroidKeystore = -not [string]::IsNullOrEmpty($env:ANDROID_KEYSTORE_BASE64)
          $hasWindowsCertificate = -not [string]::IsNullOrEmpty($env:WINDOWS_PFX_BASE64)

          "HAS_ANDROID_KEYSTORE=$($hasAndroidKeystore.ToString().ToLowerInvariant())" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "HAS_WINDOWS_CERTIFICATE=$($hasWindowsCertificate.ToString().ToLowerInvariant())" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install MAUI workload
        run: dotnet workload install maui --ignore-failed-sources
        shell: pwsh

      - name: Compute version numbers
        id: compute_versions
        shell: pwsh
        run: |
          $majorMinor = "1.0"
          $build = "${{ github.run_number }}"
          $appVersion = "$majorMinor.$build"
          $windowsVersion = "$majorMinor.$build.0"
          $releaseDir = Join-Path $env:RUNNER_TEMP 'release'

          New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null

          "APP_MAJOR_MINOR=$majorMinor" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "APP_BUILD=$build" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "APP_VERSION=$appVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "APP_VERSION_WINDOWS=$windowsVersion" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "RELEASE_DIRECTORY=$releaseDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          "app_version=$appVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Restore dependencies
        run: dotnet restore "./Password Phrase Producer/Password Phrase Producer.sln"
        shell: pwsh

      - name: Restore Android signing keystore
        if: ${{ env.HAS_ANDROID_KEYSTORE == 'true' }}
        shell: pwsh
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          [IO.File]::WriteAllBytes($env:ANDROID_KEYSTORE_PATH, [Convert]::FromBase64String($env:ANDROID_KEYSTORE_BASE64))

      - name: Publish Android APK
        shell: pwsh
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          $signingArgs = ""
          if (Test-Path $env:ANDROID_KEYSTORE_PATH) {
            $signingArgs = "-p:AndroidSigningKeyStore=$env:ANDROID_KEYSTORE_PATH -p:AndroidSigningStorePass=$env:ANDROID_KEYSTORE_PASSWORD -p:AndroidSigningKeyAlias=$env:ANDROID_KEY_ALIAS -p:AndroidSigningKeyPass=$env:ANDROID_KEY_PASSWORD"
          }
          else {
            Write-Host "::warning::Android keystore not provided. APK will be unsigned and cannot be installed or updated on devices."
          }

          dotnet publish "./Password Phrase Producer/Password Phrase Producer.sln" `
            -c Release `
            -f net9.0-android `
            -p:ApplicationDisplayVersion=$env:APP_VERSION `
            -p:ApplicationVersion=$env:APP_BUILD `
            $signingArgs

      - name: Stage Android artifact
        shell: pwsh
        run: |
          $workspace = "${{ github.workspace }}"
          $publishDir = Join-Path $workspace "Password Phrase Producer\bin\Release\net9.0-android\publish"
          if (-not (Test-Path $publishDir)) {
            throw "Android publish directory not found."
          }

          $apk = Get-ChildItem -Path $publishDir -Filter "*-Signed.apk" | Select-Object -First 1
          if (-not $apk) {
            $apk = Get-ChildItem -Path $publishDir -Filter "*.apk" | Select-Object -First 1
          }
          if (-not $apk) {
            throw "APK file was not produced."
          }

          $destination = Join-Path $env:RELEASE_DIRECTORY "Password-Phrase-Producer_$($env:APP_VERSION)_android_signed.apk"
          Copy-Item -Path $apk.FullName -Destination $destination -Force

      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: '${{ env.RELEASE_DIRECTORY }}\\Password-Phrase-Producer_${{ env.APP_VERSION }}_android_signed.apk'

      - name: Restore Windows signing certificate
        if: ${{ env.HAS_WINDOWS_CERTIFICATE == 'true' }}
        shell: pwsh
        env:
          WINDOWS_PFX_BASE64: ${{ secrets.WINDOWS_PFX_BASE64 }}
        run: |
          [IO.File]::WriteAllBytes($env:WINDOWS_CERTIFICATE_PATH, [Convert]::FromBase64String($env:WINDOWS_PFX_BASE64))

      - name: Publish Windows portable build
        shell: pwsh
        run: |
          dotnet publish "./Password Phrase Producer/Password Phrase Producer.sln" `
            -c Release `
            -f net9.0-windows10.0.19041.0 `
            -p:RuntimeIdentifier=win10-x64 `
            -p:WindowsPackageType=None `
            -p:SelfContained=true `
            -p:PublishSingleFile=false `
            -p:ApplicationDisplayVersion=$env:APP_VERSION `
            -p:ApplicationVersion=$env:APP_BUILD

      - name: Stage Windows artifact
        shell: pwsh
        run: |
          $workspace = "${{ github.workspace }}"
          $publishDir = Join-Path $workspace "Password Phrase Producer\bin\Release\net9.0-windows10.0.19041.0\win10-x64\publish"
          if (-not (Test-Path $publishDir)) {
            throw "Windows publish directory not found."
          }

          $destination = Join-Path $env:RELEASE_DIRECTORY "Password-Phrase-Producer_$($env:APP_VERSION)_windows_x64_portable.zip"
          if (Test-Path $destination) {
            Remove-Item -Path $destination -Force
          }

          Compress-Archive -Path (Join-Path $publishDir '*') -DestinationPath $destination

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: '${{ env.RELEASE_DIRECTORY }}\\Password-Phrase-Producer_${{ env.APP_VERSION }}_windows_x64_portable.zip'

  release:
    name: Release artifacts
    needs: build
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.build.outputs.app-version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Android artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: release-assets

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-portable
          path: release-assets

      - name: Generate SHA256 checksums
        working-directory: release-assets
        run: |
          sha256sum "Password-Phrase-Producer_${VERSION}_android_signed.apk" "Password-Phrase-Producer_${VERSION}_windows_x64_portable.zip" > "Password-Phrase-Producer_${VERSION}_SHA256.txt"

      - name: Determine release metadata
        id: release_meta
        run: |
          git fetch --tags --force
          base_tag="v${VERSION}"
          if git rev-parse -q --verify "refs/tags/${base_tag}" >/dev/null; then
            echo "tag=${base_tag}-rebuild" >> "$GITHUB_OUTPUT"
            echo "title=Password Phrase Producer v${VERSION} (rebuild)" >> "$GITHUB_OUTPUT"
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${base_tag}" >> "$GITHUB_OUTPUT"
            echo "title=Password Phrase Producer v${VERSION}" >> "$GITHUB_OUTPUT"
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_meta.outputs.tag }}
          name: ${{ steps.release_meta.outputs.title }}
          prerelease: ${{ steps.release_meta.outputs.prerelease }}
          files: |
            release-assets/Password-Phrase-Producer_${{ env.VERSION }}_android_signed.apk
            release-assets/Password-Phrase-Producer_${{ env.VERSION }}_windows_x64_portable.zip
            release-assets/Password-Phrase-Producer_${{ env.VERSION }}_SHA256.txt
