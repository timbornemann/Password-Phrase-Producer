name: Build Android and Windows Packages

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOTNET_VERSION: 8.0.x
  SOLUTION_PATH: ./Password Phrase Producer/Password Phrase Producer.sln
  VERSION_PREFIX: 1.0
  VERSION: 1.0.${{ github.run_number }}
  APP_BUILD: ${{ github.run_number }}
  WINDOWS_PACKAGE_VERSION: 1.0.${{ github.run_number }}.0

jobs:
  build:
    name: Build ${{ matrix.target }} package
    runs-on: windows-latest
    strategy:
      matrix:
        target: [android, windows]
    env:
      CONFIGURATION: Release
      ARTIFACTS_DIR: '${{ github.workspace }}\artifacts'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          cache: true
          cache-dependency-path: |
            **/packages.lock.json
            **/*.csproj

      - name: Cache .NET workloads
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\.dotnet\workloads
          key: ${{ runner.os }}-${{ matrix.target }}-dotnet-workloads-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-dotnet-workloads-

      - name: Cache additional NuGet data
        uses: actions/cache@v4
        with:
          path: |
            ~\.nuget\packages
            C:\Users\runneradmin\AppData\Local\NuGet\Cache
          key: ${{ runner.os }}-${{ matrix.target }}-nuget-${{ hashFiles('**/packages.lock.json', '**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Prepare artifact staging directory
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path $env:ARTIFACTS_DIR | Out-Null

      - name: Restore MAUI workloads
        shell: pwsh
        run: dotnet workload restore --ignore-failed-sources

      - name: Restore dependencies
        shell: pwsh
        run: dotnet restore "${{ env.SOLUTION_PATH }}"

      - name: Build solution
        shell: pwsh
        run: |
          dotnet build "${{ env.SOLUTION_PATH }}" -c $env:CONFIGURATION `
            -p:RunAnalyzers=false `
            -p:GenerateDocumentationFile=false

      - name: Publish Android APK
        if: ${{ matrix.target == 'android' }}
        shell: pwsh
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          $keystorePath = Join-Path $env:RUNNER_TEMP "android_signing.keystore"
          $signingArgs = ""
          if (-not [string]::IsNullOrEmpty($env:ANDROID_KEYSTORE_BASE64)) {
            [IO.File]::WriteAllBytes($keystorePath, [Convert]::FromBase64String($env:ANDROID_KEYSTORE_BASE64))
            $signingArgs = "-p:AndroidSigningKeyStore=$keystorePath -p:AndroidSigningStorePass=$env:ANDROID_KEYSTORE_PASSWORD -p:AndroidSigningKeyAlias=$env:ANDROID_KEY_ALIAS -p:AndroidSigningKeyPass=$env:ANDROID_KEY_PASSWORD"
          }
          else {
            Write-Host "::warning::Android keystore not provided. APK will be unsigned."
          }

          dotnet publish "${{ env.SOLUTION_PATH }}" `
            -c $env:CONFIGURATION `
            --no-build `
            -f net8.0-android `
            -p:RunAnalyzers=false `
            -p:GenerateDocumentationFile=false `
            -p:ApplicationDisplayVersion=${{ env.VERSION }} `
            -p:ApplicationVersion=$env:APP_BUILD `
            $signingArgs

      - name: Stage Android artifact
        if: ${{ matrix.target == 'android' }}
        shell: pwsh
        run: |
          $workspace = "${{ github.workspace }}"
          $publishDir = Join-Path $workspace "Password Phrase Producer\bin\$($env:CONFIGURATION)\net8.0-android\publish"
          if (-not (Test-Path $publishDir)) {
            throw "Android publish directory not found."
          }

          $apk = Get-ChildItem -Path $publishDir -Filter "*-Signed.apk" | Select-Object -First 1
          if (-not $apk) {
            $apk = Get-ChildItem -Path $publishDir -Filter "*.apk" | Select-Object -First 1
          }
          if (-not $apk) {
            throw "APK file was not produced."
          }

          $destination = Join-Path $env:ARTIFACTS_DIR "Password-Phrase-Producer_${{ env.VERSION }}_android_signed.apk"
          Copy-Item -Path $apk.FullName -Destination $destination -Force

      - name: Upload Android artifact
        if: ${{ matrix.target == 'android' }}
        uses: actions/upload-artifact@v4
        with:
          name: android-apk
          path: '${{ env.ARTIFACTS_DIR }}\Password-Phrase-Producer_${{ env.VERSION }}_android_signed.apk'
          if-no-files-found: error

      - name: Publish Windows portable build
        if: ${{ matrix.target == 'windows' }}
        shell: pwsh
        run: |
          dotnet publish "${{ env.SOLUTION_PATH }}" `
            -c $env:CONFIGURATION `
            --no-build `
            -f net8.0-windows10.0.19041.0 `
            -p:RuntimeIdentifier=win10-x64 `
            -p:WindowsPackageType=None `
            -p:RunAnalyzers=false `
            -p:GenerateDocumentationFile=false `
            -p:ApplicationDisplayVersion=${{ env.VERSION }} `
            -p:ApplicationVersion=$env:APP_BUILD `
            -p:PackageVersion=${{ env.WINDOWS_PACKAGE_VERSION }}

      - name: Create portable ZIP
        if: ${{ matrix.target == 'windows' }}
        shell: pwsh
        run: |
          $workspace = "${{ github.workspace }}"
          $publishDir = Join-Path $workspace "Password Phrase Producer\bin\$($env:CONFIGURATION)\net8.0-windows10.0.19041.0\win10-x64\publish"
          if (-not (Test-Path $publishDir)) {
            throw "Windows publish directory not found."
          }

          $zipPath = Join-Path $env:ARTIFACTS_DIR "Password-Phrase-Producer_${{ env.VERSION }}_windows_portable.zip"
          if (Test-Path $zipPath) {
            Remove-Item $zipPath -Force
          }

          Compress-Archive -Path "$publishDir\*" -DestinationPath $zipPath

      - name: Upload Windows artifact
        if: ${{ matrix.target == 'windows' }}
        uses: actions/upload-artifact@v4
        with:
          name: windows-portable
          path: '${{ env.ARTIFACTS_DIR }}\Password-Phrase-Producer_${{ env.VERSION }}_windows_portable.zip'
          if-no-files-found: error

  release:
    name: Release artifacts
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Android artifact
        uses: actions/download-artifact@v4
        with:
          name: android-apk
          path: release-assets

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows-portable
          path: release-assets

      - name: Generate SHA256 checksums
        working-directory: release-assets
        run: |
          sha256sum Password-Phrase-Producer_${VERSION}_android_signed.apk Password-Phrase-Producer_${VERSION}_windows_portable.zip > Password-Phrase-Producer_${VERSION}_SHA256.txt

      - name: Determine release metadata
        id: release_meta
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          git fetch --tags --force
          base_tag="v${VERSION}"
          if git rev-parse -q --verify "refs/tags/${base_tag}" >/dev/null; then
            echo "tag=${base_tag}-rebuild" >> "$GITHUB_OUTPUT"
            echo "title=Password Phrase Producer v${VERSION} (rebuild)" >> "$GITHUB_OUTPUT"
            echo "prerelease=true" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${base_tag}" >> "$GITHUB_OUTPUT"
            echo "title=Password Phrase Producer v${VERSION}" >> "$GITHUB_OUTPUT"
            echo "prerelease=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_meta.outputs.tag }}
          name: ${{ steps.release_meta.outputs.title }}
          prerelease: ${{ steps.release_meta.outputs.prerelease }}
          files: |
            release-assets/Password-Phrase-Producer_${{ env.VERSION }}_android_signed.apk
            release-assets/Password-Phrase-Producer_${{ env.VERSION }}_windows_portable.zip
            release-assets/Password-Phrase-Producer_${{ env.VERSION }}_SHA256.txt
